基本型

ABC => 字串 ABC
[ABC] => ABC任一
[^ABC] => ABC除外
[A-Z] => A~Z任一（同理[0-9])
A|B|C => A或B或C


指定數量

X* => 0至多次的X（例如："fe*" 批配 "f"、"fe"、"fee") 
X? => 0至1次的X （例如："fe?" 只批配 "f"、"fe"）
X+ => 1次以上的X
X{n} => 符合X的n位數（[0-9]{3}為包含0-9的三位數）
X{n,} => 符合X的n以上位數（[0-9]{3,}為包含0-9的三以上位數）
X{n,m} => 符合X的n以上m以下位數（[0-9]{3,5}為包含0-9的三以上五以下位數）


指定位置

^ => 符合開頭
$ => 符合結尾


字串設定

\w => 等同於[A-Za-z0-9]（含底線）
\W => 與[^\w]相同
\d => 與[0-9]相同
\D => 與[^\0-9]相同
\n => 符合換行
\r => 符合倒退符號
\t => 符合tab符號
\s => 符合空白字串（等同[\n\r\t\v\f]
\S => 等同[^\s]
\~ => ~表示的字串



建立RegExp物件

var str = new RegExp（'正規表達式','選項')
var str = /正規表達式/選項
	選項
	g => 無設定則遇到匹配就結束處理
	i => 不區別大小寫
	m => 是否對應多行
	u => 支援 Unicode

	※用建構子語法遇到\需改成\\跳脫
	※用長值表示則遇到/需\/跳脫處理

搜尋方法

var Reg = RegExp
var str = 搜尋對象
var result = str.match(Reg)


檢驗匹配（只回傳boolean值）

regexp.test(str)


搜尋最初匹配的位置

str.search(pattern)
	※無匹配回傳值為-1


用RegExp置換字串

document.write(str.replace(p, '<a href="$1">$1</a>'))


用RegExp分割字串

str.split(sep [,limit])
	ex. var p = /[\/\.\-]/gi
	    console.log('2019/12/04'.split(p)) => ["2019", "12", "04"]